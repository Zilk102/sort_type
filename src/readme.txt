
***
java version "21.0.2" 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 21.0.2+13-LTS-58)
Java HotSpot(TM) 64-Bit Server VM (build 21.0.2+13-LTS-58, mixed mode, sharing)
***

Программа sort.jar предназначена для сортировки данных, получаемых из входных *.txt файлов,
в соответствии с типом этих данных.

Особенности реализации:
- При возниконовении ошибки (не корректный входной файл или отсутствуют входные файлы), программа
проверяет наличие настоящего файла readme.txt, создает его, в случае отсутствия и выводит сообщение
с просьбой ознакомиться с инструкцией.
- При вводе несуществующих опций запуска, или некорректных аргументах опций -p и -o программа выводит
сообщение об ошибке, но продолжает работу.
- При использовании опции -a, когда выходные файлы отсутствуют, при наличии отфильтрованных данных
файл соответствующего типа будет создан.

Для запуска программы без дополнительных обработок, необходимо ввести в командную строку команду:
-java -jar sort.jar <Имя файла>  (Пример запуска: -java -jar sort.jar in1.txt)
Примечание: Программа имеет возможность обрабатывать данные из нескольких передваемых файлов
(Пример запуска:  -java -jar sort.jar in1.txt in2.txt in3.txt)*
*-Если при запуске программы не будут указаны файлы для обработки (один или более) - программа не будет выполнена.

По умолчанию программа сохраняет результаты выполнения в текущей директории под стандартными именами,
в соответствии с типом. (Пример наименований: integers.txt, strings.txt, floats.txt)

--------------------------------------------
Дополнительные опции для запуска программы:

При необходимости программу возможно запустить с применением дополнительных опций.
(Пример запуска с использованием опций: -java -jar sort.jar in1.txt -s -p result_ -o Home/dir)*
*-Запуск программы с применением указанных аргументов выведет краткую статистику выполнения программы,
добавит префикс "result_" к именам выходных файлов и сохранит результаты в директории Home/dir, если она существует.

____________________________________________
Подробное описание доступных опций:

-p <result> (Пример запуска:  -java -jar sort.jar in1.txt -p result_) - Добавляет префикс <result> к именам выходных файлов.

-o <path> (Пример запуска:   -java -jar sort.jar in1.txt -o Home/dir) - Cохраняет результаты в директории Home/dir, если она существует.

-s (Пример запуска:    -java -jar sort.jar in1.txt -s) - Выводит краткую статистику выполнения программы, содержащую кол-во
обработанных элементов соответстующего типа данных.

-f (Пример запуска:    -java -jar sort.jar in1.txt -f) - Выводит полную статистику выполнения программы, содержащую кол-во
обработанных элементов соответстующего типа данных, а также дополнительную информацию, в соответствии с типом:
для строк - Максимальную и минимальную длину отсортированных строк.
для целочисленных значений и вещественных чисел - Максимальное/Минимальное значение, сумму всех значений, а также ср.арифметическое.

-a (Пример запуска:    -java -jar sort.jar in1.txt -a) - Проверяет существование выходных файлов в указанной директории,
а также с указанным именем и при их наличии дозаписывает результаты в указанные файлы.*
*-Поскольку в данном примере не используются дополнительные опции кроме -a, программа проверит наличие файлов в текущей директории и
со стандартными наименованиями. Если выходные файлы отсутствуют, при наличии отфильтрованных данных
файл соответствующего типа будет создан.

***